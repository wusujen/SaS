package com.christine.cart.visual;

import java.util.ArrayList;
import java.util.HashMap;

import com.christine.cart.sqlite.PreviousHistory;
import com.christine.cart.sqlite.RecDailyValues;

public class NutritionAdvisor {

	private static RecDailyValues _rdv;
	private static PreviousHistory _ccart;
	private static PreviousHistory _pcart;

	private static HashMap<String, Integer> nutritionFocus;
	
	// These keep track of whether or not the nutrient has been
	// exceeded by the current cart, prev = from previous cart
	// Rec is recommended amount
	private static ArrayList<String> goodPrev;
	private static ArrayList<String> badPrev;
	private static ArrayList<String> goodRec;
	private static ArrayList<String> badRec;
	

	private final static String[] nutrients = new String[] { "calories",
			"protein", "totalfats", "carbs", "fiber", "sugar", "calcium",
			"iron", "magnesium", "potassium", "sodium", "zinc", "vitamin C",
			"vitamin D", "vitamin B6", "vitamin B12", "vitamin A", "vitamin E",
			"vitamin K", "Saturated Fat", "Mononsaturated Fat",
			"Polyunsaturated Fat", "cholesterol" };

	NutritionAdvisor(RecDailyValues recommendedNutrition,
			PreviousHistory currentCart, PreviousHistory pastCart) {
		_rdv = recommendedNutrition;
		_ccart = currentCart;
		_pcart = pastCart;
	}

	/*
	 * Returns a hashmap of nutrients and whether or not they should be limited
	 * or eagerly consumed & sets the previous alert given and recommended alert
	 * given to 0;
	 * 
	 * -1=> limit, 0=>none
	 */
	public void getNutritionFocus() {
		HashMap<String, Integer> nf = new HashMap<String, Integer>();

		String[] decreaseOn = new String[] { "totalfats", "sugar", "sodium",
				"cholesterol" };

		for (int i = 0; i < nutrients.length; i++) {
			nf.put(nutrients[i], 0);
		}

		for (int k = 0; k < decreaseOn.length; k++) {
			nf.put(decreaseOn[k], -1);
		}

		nutritionFocus = nf;
	}

	/*
	 * If previous cart exists, use this function to keep track of the advances
	 * in nutrition and warn users if they exceed previous history/ recommended
	 * values based upon nutrition focus
	 */
	public void getCurrentStateWithPastCart() {
		Float[] rdv = _rdv.getNutritionNeeds();
		Float[] ccart = _ccart.getNutritionProperties();
		Float[] pcart = _pcart.getNutritionProperties();
		
		goodPrev = new ArrayList<String>();
		badPrev = new ArrayList<String>();
		goodRec = new ArrayList<String>();
		badRec = new ArrayList<String>();
		
		for (int i = 0; i < nutrients.length; i++) {

			int focus = nutritionFocus.get(i);
			String nutrient = nutrients[i];
			float c = ccart[i];
			float r = rdv[i];
			float p = pcart[i];
			
			int bRec = badRec.indexOf(nutrient);
			int gRec = goodRec.indexOf(nutrient);
			int gPrev = goodPrev.indexOf(nutrient);
			int bPrev = badPrev.indexOf(nutrient);

			switch (focus) {
			case -1:
				if (c >= r && c < p && bRec==-1) {
					badRec.add(nutrient);
				} else if (c < r && c >= p && bPrev==-1) {
					badPrev.add(nutrient);
				} else if (r == p && c >= r
						&& bPrev != -1
						&& bRec != -1) {
					badRec.add(nutrient);
					badPrev.add(nutrient);
				}
				break;
			default: // =>0
				if (c >= r && c < p && gRec== -1) {
					goodRec.add(nutrient);
				} else if (c < r && c >= p && gPrev == -1) {
					goodPrev.add(nutrient);
				} else if (r == p && c >= r
						&& gPrev == -1
						&& gRec == -1) {
					goodPrev.add(nutrient);
					goodRec.add(nutrient);
				}
				break;
			}
		}
	}

	/*
	 * If previous cart does not exist, use this function to ensure that current
	 * cart nutrients follow the recommended amounts
	 */
	public void getCurrentStateWithoutPastCart() {
		Float[] rdv = _rdv.getNutritionNeeds();
		Float[] ccart = _ccart.getNutritionProperties();

		for (int i = 0; i < nutritionFocus.size(); i++) {
			String nutrient = nutrients[i];
			int focus = nutritionFocus.get(i);
			float c = ccart[i];
			float r = rdv[i];
			
			int bRec = badRec.indexOf(nutrient);
			int gRec = goodRec.indexOf(nutrient);

			if (bRec==-1 || gRec==-1) {
				switch (focus) {
					case -1:
						if (c >= r) {
							badRec.add(nutrient);
						}
						break;
					default: // =>0
						if (c >= r) {
							goodRec.add(nutrient);
						}
						break;
					}
			}
		}
	}
	
	public void giveAdvice(){
		
		
		if(_pcart==null || _pcart.getCalories() == 0.0f){
			getCurrentStateWithPastCart();
			
			for(int i=0; i<recAlertGiven.size(); i++){
				int p = recAlertGiven.get(i);
				switch(p){
				case -1:
					
					break;
				case 1:
					good.add(nutrients[i]);
					break;
				default:
					break;
				}
			}
		} else{
			getCurrentStateWithoutPastCart();
		}
		
		
		
	}

	/*
	 * Should be used in CheckoutActivity, when final advice should be given on
	 * the performance of the individual, no need to keep track of the state of
	 * alerts.
	 */
	public void giveFinalAdvice() {
		Float[] rdv = _rdv.getNutritionNeeds();
		Float[] ccart = _ccart.getNutritionProperties();
		Float[] pcart = _pcart.getNutritionProperties();

		for (int i = 0; i < nutritionFocus.size(); i++) {
			int focus = nutritionFocus.get(i);
			float c = ccart[i];
			float r = rdv[i];
			float p = pcart[i];

			switch (focus) {
			case -1:
				if (c >= r && c < p) {
					// alert that they must decrease the nutrient,
					// but congratulate them on doing better (improving)
				} else if (c < r && c >= p) {
					// alert that they have exceeded their previous amount
					// but try to stay under the recommended amount
				} else if (r == p && c >= r) {
					// alert that they have met both the standard and the
					// previous acheivement, and it is time to start limiting
					// the nutrient
				}
				break;
			case 1:
				if (c >= r && c < p) {
					// alert that they did better the previous time,
					// but good job on meeting/exceeding the standard!
				} else if (c < r && c >= p) {
					// alert that they have done well to exceed previous
					// but should work harder to meet the standard!
				} else if (r == p && c >= r) {
					// alert that they have met their previous goal and
					// the standard. Great job!
				}
				break;
			default: // =>0
				if (c >= r && c < p) {
					// congratulate them on meeting the standard and
					// being below their previous acheivement
				} else if (c < r && c >= p) {
					// alert that they have done better than previous,
					// and remind them to balance so that they meet
					// the standard
				} else if (r == p && c >= r) {
					// alert that they have met their previous goal and
					// the standard. good job!
				}
				break;
			}
		}
	}

}
